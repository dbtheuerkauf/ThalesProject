# -*- coding: utf-8 -*-
"""
/***************************************************************************
 masterPlugin
                                 A QGIS plugin
 adsf
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-03-02
        git sha              : $Format:%H$
        copyright            : (C) 2020 by David Theuerkauf
        email                : dbtheuerkauf@upei.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import QgsProject, QgsVectorLayer, QgsVectorLayerTools
from .path_gen import Astar, Node, Totdet
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .master_plugin_dialog import masterPluginDialog

# from .import_from_csv_algorithms import LoadCSVAlgorithm
import os.path
import csv


class MasterPlugin:
    """QGIS Plugin Implementation."""
    geography_layer = 23

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'masterPlugin_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&MasterPlugin')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('masterPlugin', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/MasterPlugin/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Master Plugin'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&MasterPlugin'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_input_file_wind(self):
        wind_layer_dir_tuple = QFileDialog.getOpenFileName(
            self.dlg, "Select input file ", "/home", '*.csv')

        self.dlg.wind_LineEdit.setText(wind_layer_dir_tuple[0])
        self.dlg.windLayerState_label.setText('Wind Layer Input')
        with open(wind_layer_dir_tuple[0]) as csv_file:
            wind_csv = csv.reader(csv_file, delimiter=',')
            line_count = 0
            for row in wind_csv:
                if line_count == 0:
                    line_count += 1
                else:
                    line_count += 1
            self.dlg.windLayerLineCount_label.setText(f'Processed {line_count} lines.')

        setattr(self, 'windLayer_csv', wind_csv)

    def select_input_file_water(self):
        water_layer_dir_tuple = QFileDialog.getOpenFileName(
            self.dlg, "Select input file ", "/home", '*.csv')
        self.dlg.water_LineEdit.setText(water_layer_dir_tuple[0])
        self.dlg.windLayerState_label.setText('Water Layer Input')
        # getting water layer into csv list
        with open(water_layer_dir_tuple[0]) as csv_file:
            water_csv = csv.reader(csv_file, delimiter=',')
            line_count = 0
            for row in water_csv:
                if line_count == 0:
                    line_count += 1
                else:
                    line_count += 1
            self.dlg.waterLayerLineCount_label.setText(f'Processed {line_count} lines.')
        setattr(self, 'waterLayer_csv', water_csv)

    def select_input_file_startEnd(self):
        startEndDir_tuple = QFileDialog.getOpenFileName(
            self.dlg, "Select input file ", "/home", '*.csv')

        self.dlg.startEnd_lineEdit.setText(startEndDir_tuple[0])
        self.dlg.startEndState_label.setText('Start / End Defined')
        # define start and end point to be implemented
        with open(self.startEndDir_string) as csv_file:
            start_end_csv = csv.reader(csv_file, delimiter=',')
            line_count = 0
            for row in start_end_csv:
                if line_count == 0:
                    line_count += 1
                else:
                    line_count += 1
            self.dlg.startEndLineCount_label.setText(f'Processed {line_count} lines.')
            setattr(self, 'start_end_csv', start_end_csv)

    def path_definition(self):
        pathGeo_layer = Astar.path(self.geography_layer, self.startEnd_csv[0][0], self.startEnd_csv[0][1])
        TimeCalc = Totdet(self.geography_layer, self.wind_csv, self.water_csv)

    def run(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = masterPluginDialog()

            # Setting up directory buttons
            self.dlg.windLayerDefinition_pushButton.clicked.connect(self.select_input_file_wind)
            self.dlg.waterLayerDefintion_pushButton.clicked.connect(self.select_intput_file_water)
            self.dlg.startEndDefinition_pushButton.clicked.connect(self.select_input_file_startEnd)
            self.dlg.generatePath_pushButton.clicked.connect(self.path_definition)

            #

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # sdfadfadad 
            pass
